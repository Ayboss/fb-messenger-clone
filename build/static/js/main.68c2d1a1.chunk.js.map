{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","variant","component","style","fontWeight","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","alt","src","FormControl","Input","value","placeholder","onChange","e","target","IconButton","disabled","type","color","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"kUAsBeA,G,MAlBAC,sBAAW,WAAsBC,GAAO,IAA3BC,EAA0B,EAA1BA,QACpBC,EAD8C,EAAjBC,WACNF,EAAQE,SACrC,OACE,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,kBAC7C,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,oBAAsB,sBAC7C,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAClC,0BAAMC,MAAO,CAACC,WAAW,UACrBT,GAAD,UAAcD,EAAQE,UAAY,eAAlC,OAEDF,EAAQA,gB,iDCDPW,EAXKC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,iDACZC,YAAa,wDACbC,UAAW,iCACXC,cAAe,6CACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAEMC,Y,yBCwDRC,MAzDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGkBJ,mBAAS,IAH3B,mBAGNtB,EAHM,KAGG2B,EAHH,KAwBb,OAnBAC,qBAAU,WACRnB,EAAGoB,WAAW,YAAYC,QAAQ,YAAY,QAAQC,YAAW,SAAAC,GAC/DN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAI,CAACC,GAAGD,EAAIC,GAAItC,QAAQqC,EAAIE,iBAE/D,IACFT,qBAAU,WACRD,EAAYW,OAAO,6BACnB,IAaA,yBAAKrC,UAAU,OACb,yBAAKsC,IAAI,GAAGC,IAAI,2HAChB,sDACA,sCAAYxC,GACZ,0BAAMC,UAAU,aACd,kBAACwC,EAAA,EAAD,CAAaxC,UAAU,oBACrB,kBAACyC,EAAA,EAAD,CAAOC,MAAOpB,EAAOtB,UAAU,aAC9B2C,YAAY,sBACZC,SAAU,SAACC,GAAD,OAAKtB,EAASsB,EAAEC,OAAOJ,UAClC,kBAACK,EAAA,EAAD,CAAY/C,UAAU,kBACtBgD,UAAW1B,EACX2B,KAAK,SACL7C,QAAQ,YACR8C,MAAM,UAAUC,QAAS,SAACN,GAAD,OAAiBA,EAxB1CO,iBAEN5C,EAAGoB,WAAW,YACbyB,IAAI,CAACxD,QAAQyB,EACRvB,SAAUA,EACVuD,UAAW7C,IAASU,UAAUoC,WAAWC,yBAE/CjC,EAAS,MAkBD,kBAAC,IAAD,SAKN,kBAAC,IAAD,KAEIC,EAASS,KAAI,YAAiB,IAAfE,EAAc,EAAdA,GAAGtC,EAAW,EAAXA,QAChB,OACE,kBAAC,EAAD,CAAS4D,IAAKtB,EAAItC,QAASA,EAASE,SAAUA,UC/CxC2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM9E,c","file":"static/js/main.68c2d1a1.chunk.js","sourcesContent":["import React, {forwardRef} from 'react';\r\nimport {Card , CardContent, Typography} from '@material-ui/core';\r\nimport './Message.css';\r\n\r\nconst Message= forwardRef(({message, username}, ref)=>{\r\n  const isUser = username ===  message.username;\r\n  return(\r\n    <div ref={ref} className={`message ${isUser && 'message__user'}`} >\r\n      <Card className={isUser ? 'message__userCard' : 'message__guestCard'} >\r\n         <CardContent>\r\n           <Typography variant=\"h5\" component=\"h2\">\r\n            <span style={{fontWeight:'bold'}} >\r\n              {!isUser && `${message.username || 'unknown user'}: `}\r\n            </span>\r\n             {message.message}\r\n           </Typography>\r\n         </CardContent>\r\n       </Card>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default Message;\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyAdBkSbyfxmpyr8RJFbt7VcLJwAM-DjNgI\",\r\n  authDomain: \"facebook-messenger-clone-97e3c.firebaseapp.com\",\r\n  databaseURL: \"https://facebook-messenger-clone-97e3c.firebaseio.com\",\r\n  projectId: \"facebook-messenger-clone-97e3c\",\r\n  storageBucket: \"facebook-messenger-clone-97e3c.appspot.com\",\r\n  messagingSenderId: \"1062331767222\",\r\n  appId: \"1:1062331767222:web:b39ecfc3b65312e5928917\",\r\n  measurementId: \"G-KM4TCWH6FM\"\r\n});\r\nconst db = firebaseApp.firestore();\r\nexport default db\r\n","import React,{useState, useEffect} from 'react';\nimport Message from './Message';\nimport {Button} from '@material-ui/core';\nimport {FormControl, InputLabel, Input} from '@material-ui/core';\nimport { IconButton } from '@material-ui/core';\nimport './App.css';\nimport db from './firebase';\nimport FlipMove from 'react-flip-move';\nimport firebase from 'firebase';\nimport SendIcon from '@material-ui/icons/Send';\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [username,setUsername] = useState('');\n\n  useEffect(()=>{\n    db.collection('messages').orderBy('timestamp','desc').onSnapshot(snapshot=>{\n      setMessages(snapshot.docs.map(doc=>( {id:doc.id, message:doc.data()} ) ))\n    })\n  },[]);\n  useEffect(()=>{\n    setUsername(prompt('Please enter your name'));\n  },[]);\n  const sendMessage = (event)=>{\n    event.preventDefault();\n\n    db.collection('messages')\n    .add({message:input,\n          username: username,\n          timestamp: firebase.firestore.FieldValue.serverTimestamp()\n                    })\n    setInput('');\n  }\n\n  return (\n    <div className=\"app\">\n      <img alt=\"\" src=\"https://www.bing.com/th?id=AMMS_d682234ca450e69f1c2b3f29ae450359&w=110&h=110&c=7&rs=1&qlt=80&pcl=f9f9f9&cdv=1&pid=16.1\" />\n      <h1>Facebook Messenger app</h1>\n      <p>welcome {username}</p>\n      <form className=\"app__form\">\n        <FormControl className=\"app__formControl\">\n          <Input value={input} className=\"app__input\"\n           placeholder=\"enter a message ...\"\n           onChange={(e)=>setInput(e.target.value)} />\n          <IconButton className=\"app__iconButton\"\n          disabled={!input}\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\" onClick={(e)=>sendMessage(e)}>\n            <SendIcon />\n          </IconButton>\n\n        </FormControl>\n      </form>\n      <FlipMove>\n        {\n          messages.map(({id,message})=>{\n            return(\n              <Message key={id} message={message} username={username}/>\n            )\n          })\n        }\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}